{"ast":null,"code":"var _jsxFileName = \"D:\\\\3rd year\\\\2nd Semister\\\\E-commerce\\\\project\\\\poultry-farm\\\\src\\\\pages\\\\LoginSignUp.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './CSS/Loginsignu.css';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginSignUp = () => {\n  _s();\n  const [fullName, setFullName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [msg, setMsg] = useState(\"\");\n  const [signOrLogin, setSignOrLogin] = useState(\"SignUp\");\n  const navigate = useNavigate();\n  const {\n    handleLogin\n  } = useContext(ShopContext); // Assuming you have a context for managing login state \n\n  useEffect(() => {\n    setTimeout(function () {\n      setMsg(\"\");\n    }, 15000);\n  }, [msg]);\n  const handleInputChange = (e, type) => {\n    switch (type) {\n      case \"fullName\":\n        setError(\"\");\n        const nameRegex = /^[a-zA-Z\\s]+$/; // Only letters and white spaces\n        setFullName(e.target.value);\n        if (e.target.value === \"\") {\n          setError(\"Full name cannot be empty\");\n        } else if (!nameRegex.test(e.target.value)) {\n          setError(\"Full name can only contain letters and white spaces\");\n        }\n        break;\n      case \"email\":\n        setError(\"\");\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; // Standard email validation regex\n        setEmail(e.target.value);\n        if (e.target.value === \"\") {\n          setError(\"Email cannot be empty\");\n        } else if (!emailRegex.test(e.target.value)) {\n          setError(\"Invalid email format\");\n        }\n        break;\n      case \"password\":\n        setError(\"\");\n        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/; // At least one capital letter, one small letter, one number, and minimum 8 characters\n        setPassword(e.target.value);\n        if (e.target.value === \"\") {\n          setError(\"Password cannot be empty\");\n        } else if (!passwordRegex.test(e.target.value) && signOrLogin === 'signUp') {\n          setError(\"Password must contain  a capital & small letter, number, and be at least 8 characters long\");\n        }\n        break;\n      default:\n        break;\n    }\n  };\n  const handleSignUpSubmit = async () => {\n    const fullNamePart = fullName.trim().split(\" \");\n    if (fullNamePart.length > 1) {\n      const firstName = fullNamePart[0];\n      const lastName = fullNamePart[1];\n      if (firstName && lastName && email && password) {\n        const nameRegex = /^[a-zA-Z\\s]+$/;\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/;\n        if (!nameRegex.test(fullName)) {\n          setError(\"Full name can only contain letters and white spaces\");\n          return;\n        }\n        if (!emailRegex.test(email)) {\n          setError(\"Invalid email format\");\n          return;\n        }\n        if (!passwordRegex.test(password)) {\n          setError(\"Password must contain capital & small letter,  number, and be at least 8 characters long\");\n          setPassword(\"\");\n          return;\n        }\n        const url = \"http://localhost/poultry/signUp.php\";\n        const headers = {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\"\n        };\n        const data = {\n          fName: firstName,\n          lName: lastName,\n          email,\n          password\n        };\n        try {\n          const response = await fetch(url, {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify(data)\n          });\n          const result = await response.json().catch(() => {\n            setError(\"Invalid response from server.\");\n            return null; // Return null or handle accordingly\n          });\n          if (result && response.ok) {\n            setMsg(result[0].result); // Adjust based on your backend response\n            // Reset fields only on success\n            setFullName(\"\");\n            setEmail(\"\");\n            setPassword(\"\");\n            navigate(\"/\"); // Redirect to the Meat category page\n          } else {\n            setError(result && result[0] ? result.result : \"An error occurred during signup.\");\n            setFullName(\"\");\n            setEmail(\"\");\n            setPassword(\"\");\n          }\n        } catch (err) {\n          setError(\"Network error: \" + err.message);\n          console.error(err);\n        }\n      } else {\n        setError(\"All fields are required\");\n      }\n    } else {\n      setError(\"Write the full name\");\n    }\n  };\n  const handleLoginSubmit = async () => {\n    if (email && password) {\n      const url = \"http://localhost/poultry/login.php\";\n      const headers = {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      };\n      const data = {\n        email: email,\n        password: password\n      };\n      try {\n        const response = await fetch(url, {\n          method: \"POST\",\n          headers: headers,\n          credentials: \"include\",\n          // Include cookies for session handlin\n          body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const jsonResponse = await response.json();\n\n        // Access the result field directly\n        if (jsonResponse.result === \"Login successful!\") {\n          setMsg(jsonResponse.result); // Show success message\n          setEmail(\"\");\n          setPassword(\"\");\n          handleLogin(); // Notify ShopContext of successful login\n          navigate('/meat'); // Redirect to the Meat category page\n        } else {\n          setError(jsonResponse.result || \"An error occurred during login.\");\n          setEmail(\"\");\n          setPassword(\"\");\n        }\n      } catch (err) {\n        setError(\"Network error: \" + err.message);\n        console.error(err);\n      }\n    } else {\n      setError(\"All fields are required!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loginsignup\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loginsignup_container\",\n      children: [signOrLogin === \"SignUp\" ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 35\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Login \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 54\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: msg !== \"\" ? /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"succesmsg\",\n          children: msg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"errormsg\",\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loginsignup_fields\",\n        children: [signOrLogin === \"SignUp\" ? /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"fName\",\n          placeholder: \"Full name\",\n          value: fullName,\n          onChange: e => handleInputChange(e, \"fullName\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 40\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 68\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          name: \"email\",\n          placeholder: \"Email Address\",\n          value: email,\n          onChange: e => handleInputChange(e, \"email\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          name: \"password\",\n          placeholder: \"password\",\n          value: password,\n          onChange: e => handleInputChange(e, \"password\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          signOrLogin === \"SignUp\" ? handleSignUpSubmit() : handleLoginSubmit();\n        },\n        children: \"Continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"loginsignup_login\",\n        children: signOrLogin === \"SignUp\" ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Already have an Account? \", /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => setSignOrLogin(\"Login\"),\n            children: \"Login here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 41\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Haven't an Account? \", /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => setSignOrLogin(\"SignUp\"),\n            children: \"Click here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 36\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loginsignup_agree\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"\",\n          name: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"By continuing, I agree to the terms of use privacy policy.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginSignUp, \"k9mqsaUXU5upF+Dyk4w/McRFzJ8=\", false, function () {\n  return [useNavigate];\n});\n_c = LoginSignUp;\nexport default LoginSignUp;\nvar _c;\n$RefreshReg$(_c, \"LoginSignUp\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","LoginSignUp","_s","fullName","setFullName","email","setEmail","password","setPassword","error","setError","msg","setMsg","signOrLogin","setSignOrLogin","navigate","handleLogin","useContext","ShopContext","setTimeout","handleInputChange","e","type","nameRegex","target","value","test","emailRegex","passwordRegex","handleSignUpSubmit","fullNamePart","trim","split","length","firstName","lastName","url","headers","Accept","data","fName","lName","response","fetch","method","body","JSON","stringify","result","json","catch","ok","err","message","console","handleLoginSubmit","credentials","Error","status","jsonResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","placeholder","onChange","onClick","id","_c","$RefreshReg$"],"sources":["D:/3rd year/2nd Semister/E-commerce/project/poultry-farm/src/pages/LoginSignUp.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport './CSS/Loginsignu.css'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst LoginSignUp = () => {\r\n    const [fullName, setFullName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const [msg, setMsg] = useState(\"\");\r\n    const [signOrLogin , setSignOrLogin] = useState(\"SignUp\");\r\n    const navigate = useNavigate();\r\n    const { handleLogin } = useContext(ShopContext); // Assuming you have a context for managing login state \r\n\r\n\r\n    useEffect(()=> {\r\n      setTimeout(function(){\r\n        setMsg(\"\");\r\n      }, 15000);\r\n    }, [msg]);\r\n    \r\n    const handleInputChange = (e, type) => {\r\n      switch (type) {\r\n          case \"fullName\":\r\n              setError(\"\");\r\n              const nameRegex = /^[a-zA-Z\\s]+$/; // Only letters and white spaces\r\n              setFullName(e.target.value);\r\n              if (e.target.value === \"\") {\r\n                  setError(\"Full name cannot be empty\");\r\n              } else if (!nameRegex.test(e.target.value)) {\r\n                  setError(\"Full name can only contain letters and white spaces\");\r\n              }\r\n              break;\r\n  \r\n          case \"email\":\r\n              setError(\"\");\r\n              const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; // Standard email validation regex\r\n              setEmail(e.target.value);\r\n              if (e.target.value === \"\") {\r\n                  setError(\"Email cannot be empty\");\r\n              } else if (!emailRegex.test(e.target.value)) {\r\n                  setError(\"Invalid email format\");\r\n              }\r\n              break;\r\n  \r\n          case \"password\":\r\n              setError(\"\");\r\n              const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/; // At least one capital letter, one small letter, one number, and minimum 8 characters\r\n              setPassword(e.target.value);\r\n              if (e.target.value === \"\") {\r\n                  setError(\"Password cannot be empty\");\r\n              } else if (!passwordRegex.test(e.target.value) && signOrLogin === 'signUp') {\r\n                  setError(\"Password must contain  a capital & small letter, number, and be at least 8 characters long\");\r\n              }\r\n              break;\r\n  \r\n          default:\r\n              break;\r\n      }\r\n  };\r\n  \r\n  const handleSignUpSubmit = async () => {\r\n      const fullNamePart = fullName.trim().split(\" \");\r\n  \r\n      if (fullNamePart.length > 1) {\r\n          const firstName = fullNamePart[0];\r\n          const lastName = fullNamePart[1];\r\n  \r\n          if (firstName && lastName && email && password) {\r\n              const nameRegex = /^[a-zA-Z\\s]+$/;\r\n              const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n              const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$/;\r\n  \r\n              if (!nameRegex.test(fullName)) {\r\n                  setError(\"Full name can only contain letters and white spaces\");\r\n                  return;\r\n              }\r\n  \r\n              if (!emailRegex.test(email)) {\r\n                  setError(\"Invalid email format\");\r\n                  return;\r\n              }\r\n  \r\n              if (!passwordRegex.test(password)) {\r\n                  setError(\"Password must contain capital & small letter,  number, and be at least 8 characters long\");\r\n        \r\n                      setPassword(\"\");\r\n                  return;\r\n              }\r\n  \r\n              const url = \"http://localhost/poultry/signUp.php\";\r\n              const headers = {\r\n                  Accept: \"application/json\",\r\n                  \"Content-Type\": \"application/json\",\r\n              };\r\n              const data = {\r\n                  fName: firstName,\r\n                  lName: lastName,\r\n                  email,\r\n                  password,\r\n              };\r\n  \r\n              try {\r\n                  const response = await fetch(url, {\r\n                      method: \"POST\",\r\n                      headers: headers,\r\n                      body: JSON.stringify(data),\r\n                  });\r\n  \r\n                  const result = await response.json().catch(() => {\r\n                      setError(\"Invalid response from server.\");\r\n                      return null; // Return null or handle accordingly\r\n                  });\r\n  \r\n                  if (result && response.ok) {\r\n                      setMsg(result[0].result); // Adjust based on your backend response\r\n                      // Reset fields only on success\r\n                      setFullName(\"\");\r\n                      setEmail(\"\");\r\n                      setPassword(\"\");\r\n                      navigate(\"/\"); // Redirect to the Meat category page\r\n                  } else {\r\n                    setError(result && result[0] ? result.result : \"An error occurred during signup.\");\r\n                    setFullName(\"\");\r\n                      setEmail(\"\");\r\n                      setPassword(\"\");\r\n                  }\r\n              } catch (err) {\r\n                  setError(\"Network error: \" + err.message);\r\n                  console.error(err);\r\n              }\r\n          } else {\r\n              setError(\"All fields are required\");\r\n          }\r\n      } else {\r\n          setError(\"Write the full name\");\r\n      }\r\n  };\r\n\r\n  const handleLoginSubmit = async () => {\r\n    if (email && password) {\r\n        const url = \"http://localhost/poultry/login.php\";\r\n        const headers = {\r\n            \"Accept\": \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        };\r\n        const data = {\r\n            email: email,\r\n            password: password\r\n        };\r\n\r\n        try {\r\n            const response = await fetch(url, {\r\n                method: \"POST\",\r\n                headers: headers,\r\n                credentials: \"include\", // Include cookies for session handlin\r\n                body: JSON.stringify(data)\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const jsonResponse = await response.json();\r\n\r\n            // Access the result field directly\r\n            if (jsonResponse.result === \"Login successful!\") {\r\n                setMsg(jsonResponse.result); // Show success message\r\n                setEmail(\"\");\r\n                setPassword(\"\");\r\n                handleLogin(); // Notify ShopContext of successful login\r\n                navigate('/meat'); // Redirect to the Meat category page\r\n            } else {\r\n                setError(jsonResponse.result || \"An error occurred during login.\");\r\n                setEmail(\"\");\r\n                setPassword(\"\");\r\n            }\r\n        } catch (err) {\r\n            setError(\"Network error: \" + err.message);\r\n            console.error(err);\r\n        }\r\n    } else {\r\n        setError(\"All fields are required!\");\r\n    }\r\n};\r\n\r\n\r\n   \r\n  return (\r\n    <div className='loginsignup'>\r\n      <div className=\"loginsignup_container\">\r\n       {signOrLogin === \"SignUp\"? <h1>Sign Up</h1> : <h1> Login </h1>} \r\n        <p>\r\n          {\r\n            msg !== \"\" ?\r\n            <span className=\"succesmsg\">{msg}</span> :\r\n            <span className=\"errormsg\">{error}</span>            \r\n          }\r\n        </p>\r\n        <div className=\"loginsignup_fields\">\r\n          {signOrLogin === \"SignUp\" ?  <input type=\"text\" name='fName' placeholder='Full name' value={fullName} \r\n            onChange={(e) => handleInputChange(e, \"fullName\")}/> : <p/>}\r\n         \r\n          <input type=\"email\" name='email' placeholder='Email Address' value={email}\r\n             onChange={(e) => handleInputChange(e, \"email\")}/>\r\n          <input type=\"password\" name='password' placeholder='password' value={password}\r\n             onChange={(e) => handleInputChange(e, \"password\")}/>\r\n        </div>\r\n        <button onClick={() => { signOrLogin === \"SignUp\"? handleSignUpSubmit() : handleLoginSubmit()  } }>Continue</button>\r\n        <p className=\"loginsignup_login\">\r\n          {signOrLogin === \"SignUp\"?\r\n            <p>Already have an Account? <span onClick={() => setSignOrLogin(\"Login\")}>Login here</span></p>:\r\n            <p>Haven't an Account? <span onClick={() => setSignOrLogin(\"SignUp\")}>Click here</span></p>\r\n          }\r\n          \r\n        </p>\r\n        <div className=\"loginsignup_agree\">\r\n          <input type=\"checkbox\" id='' name='' />\r\n          <p>By continuing, I agree to the terms of use privacy policy.</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginSignUp\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}